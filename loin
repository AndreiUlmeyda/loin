#!/bin/bash

BASEDIR=$(readlink -f "$0" | xargs dirname)

function bookmarksAsJson {
	buku -p -j
}

function jsonToLine {
	"$BASEDIR"/jsonToLine.jq
}

function formatColumns {
	"$BASEDIR"/format-columns.awk
}

function searchAsYouType {
}

function openInBrowser {
	while read -r selectedUrlAndIndex; do
		selectedUrl=${selectedUrlAndIndex%|*}
		xdg-open "$selectedUrl"
	done
	# show mode of operation, enable passing strings which are not displayed but used as output
	peco --prompt "$mode:" --null
}

function searchAndSelectBookmarks {
	bookmarksAsJson |
	jsonToLine |
	formatColumns |
	searchAsYouType
}

function askUserForTag {
	read -r -p "input the comma separated list of tags to add: " tag
	echo "$tag"
}

function tagBookmarkAtIndex {
	index=$1
	tag=$2
	buku --update "$index" --tag "$tag"
}

function exitWhenEmpty {
	if [[ -z $1 ]]; then
		exit 0
	fi
}

function updateTitles {
	urlsAndIndices=(`searchAndSelectBookmarks`)
	exitWhenEmpty $urlsAndIndices
	for urlAndIndex in "${urlsAndIndices[@]}"; do
		index="${urlAndIndex#*|}"
		buku -p "$index"
		read -r -p "Enter a new title for the bookmark above: " newTitle
		if [[ -n $newTitle ]]; then
			buku --tacit -u "$index" -t "$newTitle"
		else
			echo "The new title was empty, no update was done."
		fi
	done
}

function tagBookmarks {
	urlsAndIndices=(`searchAndSelectBookmarks`)
	exitWhenEmpty $urlsAndIndices
	tag=$(askUserForTag)

	for urlAndIndex in "${urlsAndIndices[@]}"; do
		index="${urlAndIndex#*|}"
		tagBookmarkAtIndex "$index" "$tag"
	done
}

function openBookmarks {
	searchAndSelectBookmarks | openInBrowser
}
# parse command line arguments #

# check if getopt is available
parsingLibraryError="The method used to parse command line flags is not available on your system, see the github page for directions."
getopt --test > /dev/null
if [[ $? -ne 4 ]]; then
    echo "$parsingLibraryError"
    exit 1
fi

# specify valid flags
shortOptions=htTd
longOptions=help,tag,title,delete

PARSED=$(getopt --options $shortOptions --longoptions $longOptions --name "$0" -- "$@")

# exit if parsing arguments failed
if [[ $? -ne 0 ]]; then
    exit 1
fi

# default behaviour
mode="open"

helpText="herpderp"

while true; do
    case "$1" in
    	-h|--help)
			echo "$helpText"
			exit 0
			;;
        -t|--tag)
            mode="tag"
            shift
            ;;
        -T|--title)
            mode="title"
            shift
            ;;
        -d|--delete)
        	mode="delete"
        	shift
        	;;
        *)
			break
			;;
    esac
done

# run
case "$mode" in
	open)
		openBookmarks
		;;
	tag)
		tagBookmarks
		;;
	title)
		updateTitles
		;;
	delete)
		deleteBookmarks
		;;
esac
